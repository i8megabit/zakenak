apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Values.release.namespace }}
  labels:
    app: open-webui
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: open-webui
  template:
    metadata:
      labels:
        app: open-webui
    spec:
      initContainers:
      - name: check-ollama-service
        image: curlimages/curl:latest
        command: ['sh', '-c', 'until curl -s http://ollama.prod.svc.cluster.local:11434/api/version | grep -q "version"; do echo "Waiting for Ollama service..."; sleep 5; done && echo "Ollama service is ready" && sleep 10']
        resources:
          limits:
            cpu: "200m"
            memory: "128Mi"
          requests:
            cpu: "100m"
            memory: "64Mi"
      containers:
      - name: open-webui
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /app/backend && \
            bash start.sh
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        envFrom:
        - secretRef:
            name: {{ .Release.Name }}-secrets
        {{- if .Values.deployment.envFrom }}
        {{- toYaml .Values.deployment.envFrom | nindent 8 }}
        {{- end }}
        {{- if .Values.deployment.gpuConfig }}
        - configMapRef:
            name: gpu-config
            optional: true
        {{- end }}
        env:
        {{- with .Values.deployment.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.deployment.resources | nindent 10 }}
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 15"]
        {{- if or .Values.persistence.enabled .Values.persistence.useHostPath }}
        volumeMounts:
        - name: data
          mountPath: /app/backend/data
        {{- end }}
      {{- if or .Values.persistence.enabled .Values.persistence.useHostPath }}
      volumes:
      - name: data
        {{- if .Values.persistence.useHostPath }}
        hostPath:
          path: {{ .Values.persistence.hostPath }}
          type: DirectoryOrCreate
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pvc
        {{- end }}
      {{- end }}